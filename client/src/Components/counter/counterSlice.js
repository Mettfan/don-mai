import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import axios from 'axios';
import { fetchCount } from './counterAPI';
import { selectProduct as sp  } from './selectProduct';
import { selectProductByBarcode as spbb  } from './selectProductByBarcode';

const initialState = {
  value: 0,
  status: 'idle',
  productSelected: null
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  'counter/fetchCount',
  async (amount) => {
    const response = await fetchCount(amount)
    // The value we return becomes the `fulfilled` action payload
    return response.data
  }
);
export const selectProduct = createAsyncThunk(
  'counter/selectProduct',
  async (id) => {
    const response = await sp(id)
    // The value we return becomes the `fulfilled` action payload
    
  });
export const selectProductByBarcode = createAsyncThunk(
  'counter/selectProductByBarcode',
  async (codigo) => {
    const response = await spbb(codigo)
    // The value we return becomes the `fulfilled` action payload
    
  }
);

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
      state.productSelected = action.payload
      // window.location.reload()
    },
    decrement: (state, action) => {
      state.value -= 1
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    
    decrementByAmount: (state, action) => {
      state.value -= action.payload;
    },
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
    getProduct: (state, action) => {
      state.productSelected = action.payload;
    },
    getProductByBarcode: (state, action) => {
      state.productSelected = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder

      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      })
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      // .addCase(increment.fulfilled, (state, action) => {
      //   state.status = 'idle';
      //   state.productSelected += action.payload;
      // })
      // // .addCase(getProduct.pending, (state) => {
      //   state.status = 'loading';
        
      // })
      // .addCase(getProduct.fulfilled, (state, action) => {
      //   state.status = 'idle';
      //   // state.productSelected = action?.payload
      // })
      
      
  },
});

export const { increment, decrement, incrementByAmount, getProduct , getProductByBarcode} = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state) => state.counter.value;
export const productSelector = (state) => state.counter.productSelected ;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};
export const nextPage = (amount) => (dispatch, getState) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};

export default counterSlice.reducer;
